- React apps are made out of components.
    - components piece of UI that has its own logic and appearance
        - can be as small as a button or as large as an entire space
- code sample
---- component
function MyButton() {
  return (
    <button>
      I'm a button
    </button>
  );
}
---- component
export default function MyApp() {
  return (
    <div>
      <h1>Welcome to my app</h1>
      <MyButton />
    </div>
  );
}

- export default keywords specify main component in the file
- The markup syntax you’ve seen above is called JSX. It is optional, but most React projects use JSX for its convenience.
- JSX is stricter than HTML. You have to close tags like <br />. Your component also can’t return multiple JSX tags. 
You have to wrap them into a shared parent, like a <div>...</div> or an empty <>...</> wrapper:

- React does not prescribe how you add CSS files. In the simplest case, you’ll add a <link> tag to your HTML.
- JSX lets you put markup into JavaScript. Curly braces let you “escape back” into JavaScript so that you can 
embed some variable from your code and display it to the user
- style={{width: user.imageSize,height: user.imageSize}}
- In React, there is no special syntax for writing conditions. Instead, you’ll use the same techniques as you use when writing regular JavaScript code.
Code sample
let content;
if (isLoggedIn) {
  content = <AdminPanel />;
} else {
  content = <LoginForm />;
}
return (
  <div>
    {content}
  </div>
);

- u can make the conditional more compact depending on situation
- Rendering lists
  - basically how do your for loop iterations to view but like techniques
  - const listItems = products.map(product =>
      <li key={product.id}>
        {product.title}
      </li>
    );

    return (
      <ul>{listItems}</ul>
    );

-- here is the complete code
    const products = [
      { title: 'Cabbage', isFruit: false, id: 1 },
      { title: 'Garlic', isFruit: false, id: 2 },
      { title: 'Apple', isFruit: true, id: 3 },
    ];

    export default function ShoppingList() {
      const listItems = products.map(product =>
        <li
          key={product.id}
          style={{
            color: product.isFruit ? 'magenta' : 'darkgreen'
          }}
        >
          {product.title}
        </li>
      );

      return (
        <ul>{listItems}</ul>
      );
    }

- Responding to events
  - we can use event handlers to respond to events so like onclick
  - <button onClick={handleClick}>Click me</button>

- updating the screen - using useState

- using hooks
  - useState is a built in hook provided by React
  - other built in references https://react.dev/reference/react
  - Hooks are more restrictive than other functions. You can only call Hooks at the top of your components (or other Hooks). 
    If you want to use useState in a condition or a loop, extract a new component and put it there.
  - you can also make the code share the same useState